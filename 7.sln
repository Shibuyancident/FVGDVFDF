using System;
using System.Collections.Generic;
public class Calculator<T>
{
    public delegate T BinaryOperation(T a, T b);

    public T PerformOperation(T a, T b, BinaryOperation operation)
    {
        return operation(a, b);
    }
}


public class Repository<T>
{
    private List<T> items = new List<T>();

    public void AddItem(T item)
    {
        items.Add(item);
    }

    public List<T> Find(Criteria<T> criteria)
    {
        List<T> result = new List<T>();
        foreach (T item in items)
        {
            if (criteria(item))
            {
                result.Add(item);
            }
        }
        return result;
    }
}
public delegate bool Criteria<T>(T item);
public class FunctionCache<TKey, TResult>
{
    private Dictionary<TKey, CacheItem<TResult>> cache = new Dictionary<TKey, CacheItem<TResult>>();
    private Func<TKey, TResult> function;
    private TimeSpan cacheDuration;

    public FunctionCache(Func<TKey, TResult> func, TimeSpan duration)
    {
        function = func;
        cacheDuration = duration;
    }

    public TResult GetResult(TKey key)
    {
        if (cache.TryGetValue(key, out var cacheItem) && DateTime.Now - cacheItem.Timestamp < cacheDuration)
        {
            return cacheItem.Value;
        }
        else
        {
            TResult result = function(key);
            cache[key] = new CacheItem<TResult>(result, DateTime.Now);
            return result;
        }
    }
    private class CacheItem<T>
    {
        public T Value { get; }
        public DateTime Timestamp { get; }

        public CacheItem(T value, DateTime timestamp)
        {
            Value = value;
            Timestamp = timestamp;
        }
    }
}
public class TaskScheduler<TTask, TPriority>
{
    private PriorityQueue<TTask, TPriority> taskQueue = new PriorityQueue<TTask, TPriority>();
    private Func<TTask, TPriority> priorityFunction;
    private Dictionary<TTask, object> objectPool = new Dictionary<TTask, object>();

    public TaskScheduler(Func<TTask, TPriority> priorityFunc)
    {
        priorityFunction = priorityFunc;
    }

    public void AddTask(TTask task)
    {
        TPriority priority = priorityFunction(task);
        taskQueue.Enqueue(task, priority);
    }

    public void ExecuteNext(TaskExecution<TTask> executionFunc)
    {
        if (taskQueue.Count > 0)
        {
            KeyValuePair<TTask, TPriority> task = taskQueue.Dequeue();
            executionFunc(task.Key);
            objectPool.Remove(task.Key);
        }
        else
        {
            Console.WriteLine("No tasks in the queue.");
        }
    }

    public void ReturnObjectToPool(TTask task, object obj)
    {
        objectPool[task] = obj;
    }

    public object GetObjectFromPool(TTask task)
    {
        if (objectPool.TryGetValue(task, out var obj))
        {
            return obj;
        }
        return null;
    }
}
public delegate void TaskExecution<TTask>(TTask task);

class Program
{
    static void Main(string[] args)
    {
        Calculator<int> intCalculator = new Calculator<int>();
        Calculator<double> doubleCalculator = new Calculator<double>();

        int sum = intCalculator.PerformOperation(5, 3, (a, b) => a + b); 
        double product = doubleCalculator.PerformOperation(2.5, 4.0, (a, b) => a * b); 

        Console.WriteLine($"Sum: {sum}");
        Console.WriteLine($"Product: {product}");

      
        Repository<string> stringRepository = new Repository<string>();
        stringRepository.AddItem("apple");
        stringRepository.AddItem("banana");
        stringRepository.AddItem("orange");

        List<string> filteredItems = stringRepository.Find(item => item.StartsWith("a"));
        Console.WriteLine("Filtered items starting with 'a':");
        foreach (string item in filteredItems)
        {
            Console.WriteLine(item);
        }
        FunctionCache<string, int> cache = new FunctionCache<string, int>(CalculateStringLength, TimeSpan.FromSeconds(10));
        int length1 = cache.GetResult("apple"); 
        int length2 = cache.GetResult("apple"); 

        Console.WriteLine($"String length of 'apple': {length1}");
        Console.WriteLine($"String length of 'apple' from cache: {length2}");

        TaskScheduler<string, int> scheduler = new TaskScheduler<string, int>(task => task.Length);
        scheduler.AddTask("Task 1");
        scheduler.AddTask("Task 2");

        scheduler.ExecuteNext(task => Console.WriteLine($"Executing task: {task}"));

        object obj = new object();
        scheduler.ReturnObjectToPool("Task 1", obj);

        object retrievedObj = scheduler.GetObjectFromPool("Task 1");
        Console.WriteLine("Object retrieved from pool: " + (retrievedObj == null ? "null" : "not null"));
    }
    static int CalculateStringLength(string str)
    {
        Console.WriteLine($"Calculating length of '{str}'");
        return str.Length;
    }
}
